let Bower = require('./bower');let tool = require('../tool/index');let cheerio = require('cheerio');let images = require('images');let config = require('../config/index').image;let getPixels = require("get-pixels");let http = require('https');const chalk = require('chalk');// 利用http模块获取图片var download = function(url, callback) {    if (url.indexOf('base64') == -1) {        const buffer = [];        http.get(url, function(rs) {            rs.on('data', (data) => {                buffer.push(data);            });            // pipe是一个异步流，添加该事件，修复download中获取当前下载文件中添加settimeout的问题            rs.on('end', () => {                callback(Buffer.concat(buffer));             });        });    } else {        // 将base64转成buffer(base64 需要把头截取)        callback(Buffer.from(url.split('base64,')[1], 'base64'));     }    };class Imager {    constructor() {        this.bower = new Bower();    }    toShow(pixels) {        var str = '';        var width = pixels.shape[0];        var height = pixels.shape[1];        for (var i = 0; i < height; i++) {            for (var j = 0; j < width; j++) {                var r = pixels.get(j, i, 0);                var g = pixels.get(j, i, 1);                var b = pixels.get(j, i, 2);                // var grr = r * 0.299 + g * 0.587 + b * 0.114;                // if(grr >= 250){                //     str += chalk.bgRgb(r,g,b)(' ')                // }else{                //     str += chalk.bgRgb(r,g,b)(this.gread.charAt(Math.round(grr / this.jibie)))                // }                str += chalk.bgRgb(r, g, b)(' ');            }            str += '\n';        }        console.log(str);    }    async getImageString(cmdArguments) {        if (!cmdArguments) {            console.log('请输入要搜索的图片名称！');            return;        }        const {data} = await this.bower.openPage(            config.url + encodeURI(cmdArguments)        );        let $ = cheerio.load(data);        let imgList = $(config.imgClassName);        // 获取图片链接        const index = tool.randomRange(0, imgList.length - 1);        const url = $(imgList[index]).attr('src') || $(imgList[index]).attr('data-src');        // 下载图片        download(url, (data) => {            let buff = images(data).size(config.size).encode("jpg", {                operation: 100            });            getPixels(buff, 'image/jpg', (err, pixels) => {                if (err) {                    console.log("Bad image path");                    return;                }                // 控制台展示图片                this.toShow(pixels);            });        });    }}module.exports = {    consoleImageString: function(cmdArguments) {        new Imager().getImageString(cmdArguments);    }}